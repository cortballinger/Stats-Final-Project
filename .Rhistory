app = FastAPI()
# Define a Pydantic model for your input data structure, if needed
class InputModel(BaseModel):
# Define your input parameters
example_field: str
@app.post("/predict")
async def make_prediction(input_data: InputModel):
# Convert input_data to the format expected by your model
# This step depends on how your model expects the data
model_input = transform_input(input_data)
prediction = predict(model, model_input)
return {"prediction": prediction}
quit
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
reticulate::repl_python()
from vetiver import VetiverAPI
import uvicorn
v = VetiverModel.from_pin('penguin_model_pin')
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
from vetiver import VetiverAPI
import uvicorn
v = VetiverModel.from_pin('penguin_model_pin')
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
from vetiver import VetiverAPI
import uvicorn
v = VetiverModel.from_pin('penguin_model_pin')
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
install.packages("palmerpenguins")
install.packages("dplyr")
install.packages("ggplot2")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
),
.groups = "drop"
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
install.packages("DBI")
install.packages("duckdb")
install.packages("dbplyr")
library(DBI)
library(duckdb)
library(dbplyr)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins, overwrite = TRUE)
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
DBI::dbDisconnect(con, shutdown = TRUE)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
vetiver.prepare_docker(model_board, "penguin_model")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
vetiver_prepare_docker(model_board, "penguin_model")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write, vetiver.prepare_docker
from pins import board_folder
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
vetiver.prepare_docker(model_board, "penguin_model")
from joblib import dump
from vetiver import VetiverModel, vetiver_pin_write, vetiver.prepare_docker
from pins import board_folder
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
vetiver.prepare_docker(model_board, "penguin_model")
from joblib import dump
# Import the vetiver package
import vetiver
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Assuming 'model' and 'X' are defined earlier in your code
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
# Prepare a Docker container for deployment
vetiver.prepare_docker(model_board, "penguin_model")
from joblib import dump
# Import the vetiver package
import vetiver
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Assuming 'model' and 'X' are defined earlier in your code
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
# Prepare a Docker container for deployment
#vetiver.prepare_docker(model_board, "penguin_model")
app.run(port = 8080)
from joblib import dump
# Import the vetiver package
import vetiver
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Assuming 'model' and 'X' are defined earlier in your code
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
# Prepare a Docker container for deployment
#vetiver.prepare_docker(model_board, "penguin_model")
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
from joblib import dump
# Import the vetiver package
import vetiver
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Assuming 'model' and 'X' are defined earlier in your code
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
# Prepare a Docker container for deployment
#vetiver.prepare_docker(model_board, "penguin_model")
from joblib import dump
# Import the vetiver package
import vetiver
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Assuming 'model' and 'X' are defined earlier in your code
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
# Prepare a Docker container for deployment
#vetiver.prepare_docker(model_board, "penguin_model")
from vetiver import VetiverAPI
import uvicorn
v = VetiverModel.from_pin('penguin_model_pin')
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
from vetiver import VetiverAPI
import uvicorn
v = VetiverModel.from_pin('penguin_model_pin')
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
from vetiver import VetiverAPI
import uvicorn
v = VetiverModel.from_pin('penguin_model_pin')
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
from vetiver import VetiverAPI
import uvicorn
v = VetiverModel.from_pin('penguin_model_pin')
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
from vetiver import VetiverAPI
import uvicorn
v = VetiverModel.from_pin('penguin_model_pin')
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
install.packages("palmerpenguins")
install.packages("dplyr")
install.packages("ggplot2")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
),
.groups = "drop"
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
install.packages("DBI")
install.packages("duckdb")
install.packages("dbplyr")
library(DBI)
library(duckdb)
library(dbplyr)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins, overwrite = TRUE)
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
DBI::dbDisconnect(con, shutdown = TRUE)
renv::snapshot()
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
# Import the vetiver package
import vetiver
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Assuming 'model' and 'X' are defined earlier in your code
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
# Prepare a Docker container for deployment
#vetiver.prepare_docker(model_board, "penguin_model")
from joblib import dump
# Import the vetiver package
import vetiver
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Assuming 'model' and 'X' are defined earlier in your code
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
# Prepare a Docker container for deployment
vetiver.prepare_docker(model_board, "penguin_model")
from vetiver import VetiverAPI
import uvicorn
v = VetiverModel.from_pin('penguin_model_pin')
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
reticulate::repl_python()
install.packages("palmerpenguins")
install.packages("dplyr")
install.packages("ggplot2")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
),
.groups = "drop"
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
install.packages("DBI")
install.packages("duckdb")
install.packages("dbplyr")
library(DBI)
library(duckdb)
library(dbplyr)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins, overwrite = TRUE)
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
DBI::dbDisconnect(con, shutdown = TRUE)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from joblib import dump
# Import the vetiver package
import vetiver
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Assuming 'model' and 'X' are defined earlier in your code
# Save your model locally with joblib
dump(model, 'model.pkl')
# Initialize a VetiverModel object
v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
vetiver_pin_write(model_board, v, 'penguin_model_pin')
# Prepare a Docker container for deployment
vetiver.prepare_docker(model_board, "penguin_model")
from vetiver import VetiverAPI
import uvicorn
v = VetiverModel.from_pin('penguin_model_pin')
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
#from joblib import dump
# Import the vetiver package
#import vetiver
#from vetiver import VetiverModel, vetiver_pin_write
#from pins import board_folder
# Assuming 'model' and 'X' are defined earlier in your code
# Save your model locally with joblib
#dump(model, 'model.pkl')
# Initialize a VetiverModel object
#v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
#model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
#vetiver_pin_write(model_board, v, 'penguin_model_pin')
# Prepare a Docker container for deployment
#vetiver.prepare_docker(model_board, "penguin_model")
quit
install.packages("palmerpenguins")
install.packages("dplyr")
install.packages("ggplot2")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
),
.groups = "drop"
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
install.packages("DBI")
install.packages("duckdb")
library(DBI)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins, overwrite = TRUE)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins, overwrite = TRUE)
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
DBI::dbDisconnect(con, shutdown = TRUE)
library(shiny)
ui <- fluidPage(
img(src = "C:\Users\C25Cort.Ballinger\OneDrive - afacademy.af.edu\Pictures\adele.jpg", height = "200px") # Adjust path and size as needed
![Adele Penguins](C:\Users\C25Cort.Ballinger\OneDrive - afacademy.af.edu\Pictures\adele.jpg)
knitr::include_graphics("C:\Users\C25Cort.Ballinger\OneDrive - afacademy.af.edu\Pictures\adele.jpg")
knitr::include_graphics("C:\Users\C25Cort.Ballinger\OneDrive - afacademy.af.edu\Pictures\adele.jpg")
knitr::include_graphics("C:\Users\C25Cort.Ballinger\OneDrive - afacademy.af.edu\Pictures\adele.jpg")
knitr::include_graphics("C:\\Users\\C25Cort.Ballinger\\OneDrive - afacademy.af.edu\\Pictures\\adele.jpg")
knitr::include_graphics("C:\\Users\\C25Cort.Ballinger\\OneDrive - afacademy.af.edu\\Pictures\\chinstrap.jpg")
knitr::include_graphics("C:\\Users\\C25Cort.Ballinger\\OneDrive - afacademy.af.edu\\Pictures\\gentoo.jpg")
knitr::include_graphics("images\adele.jpg")
knitr::include_graphics("C:\\Users\\C25Cort.Ballinger\\OneDrive - afacademy.af.edu\\Desktop\\Final Project\\images\\adele.jpg")
knitr::include_graphics("C:\\Users\\C25Cort.Ballinger\\OneDrive - afacademy.af.edu\\Desktop\\Final Project\\images\\adelie.jpg")
knitr::include_graphics("C:\\Users\\C25Cort.Ballinger\\OneDrive - afacademy.af.edu\\Desktop\\Final Project\\images\\chinstrap.jpg")
knitr::include_graphics("C:\\Users\\C25Cort.Ballinger\\OneDrive - afacademy.af.edu\\Desktop\\Final Project\\images\\gentoo.jpg")
knitr::include_graphics("C:\\Users\\C25Cort.Ballinger\\OneDrive - afacademy.af.edu\\Desktop\\Final Project\\images\\adelie.jpg")
knitr::include_graphics("C:\\Users\\C25Cort.Ballinger\\OneDrive - afacademy.af.edu\\Desktop\\Final Project\\images\\chinstrap.jpg")
library(tidyselect)
library(dbplyr)
library(DBI)
library(duckdb)
