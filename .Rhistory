renv::snapshot()
packages <- c("palmerpenguins", "dplyr", "ggplot2", "tidyverse", "tidymodels", "ISLR2","rpart.plot", "vip", "xgboost", "randomForest")
suppressMessages(sapply(packages, install.packages))
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(ISLR2)
library(rpart.plot)
library(vip)
library(xgboost)
library(randomForest)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
),
.groups = "drop"
) %>%
knitr::kable()
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
),
.groups = "drop"
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = bill_depth_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
#Random Forest For sex
tree_spec <- decision_tree() %>%
set_engine("rpart")
class_tree_spec <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification")
class_tree_fit <- class_tree_spec %>%
fit(sex ~ ., data = penguins)
class_tree_fit %>%
extract_fit_engine() %>%
rpart.plot()
augment(class_tree_fit, new_data = penguins) %>%
accuracy(truth = sex, estimate =.pred_class)
augment(class_tree_fit, new_data = penguins) %>%
conf_mat(truth = sex, estimate =.pred_class)
packages <- c("DBI", "duckdb")
suppressMessages(sapply(packages, install.packages))
library(DBI)
library(duckdb)
packages <- c("DBI", "duckdb")
suppressMessages(sapply(packages, install.packages))
library(DBI)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins, overwrite = TRUE)
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
DBI::dbDisconnect(con, shutdown = TRUE)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
quit
#packages <- c("palmerpenguins", "dplyr", "ggplot2", "tidyverse", "tidymodels", "ISLR2","rpart.plot", "vip", "xgboost", "randomForest")
#suppressMessages(sapply(packages, install.packages))
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(ISLR2)
library(rpart.plot)
library(vip)
library(xgboost)
library(randomForest)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
),
.groups = "drop"
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = bill_depth_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
#Random Forest For sex
tree_spec <- decision_tree() %>%
set_engine("rpart")
class_tree_spec <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification")
class_tree_fit <- class_tree_spec %>%
fit(sex ~ ., data = penguins)
class_tree_fit %>%
extract_fit_engine() %>%
rpart.plot()
augment(class_tree_fit, new_data = penguins) %>%
accuracy(truth = sex, estimate =.pred_class)
augment(class_tree_fit, new_data = penguins) %>%
conf_mat(truth = sex, estimate =.pred_class)
packages <- c("DBI", "duckdb")
suppressMessages(sapply(packages, install.packages))
#packages <- c("palmerpenguins", "dplyr", "ggplot2", "tidyverse", "tidymodels", "ISLR2","rpart.plot", "vip", "xgboost", "randomForest")
#suppressMessages(sapply(packages, install.packages))
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(ISLR2)
library(rpart.plot)
library(vip)
library(xgboost)
library(randomForest)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
),
.groups = "drop"
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = bill_depth_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
#Random Forest For sex
tree_spec <- decision_tree() %>%
set_engine("rpart")
class_tree_spec <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification")
class_tree_fit <- class_tree_spec %>%
fit(sex ~ ., data = penguins)
class_tree_fit %>%
extract_fit_engine() %>%
rpart.plot()
augment(class_tree_fit, new_data = penguins) %>%
accuracy(truth = sex, estimate =.pred_class)
augment(class_tree_fit, new_data = penguins) %>%
conf_mat(truth = sex, estimate =.pred_class)
#packages <- c("DBI", "duckdb")
#suppressMessages(sapply(packages, install.packages))
library(DBI)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins, overwrite = TRUE)
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
DBI::dbDisconnect(con, shutdown = TRUE)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
#from joblib import dump
# Import the vetiver package
#import vetiver
#from vetiver import VetiverModel, vetiver_pin_write
#from pins import board_folder
# Assuming 'model' and 'X' are defined earlier in your code
# Save your model locally with joblib
#dump(model, 'model.pkl')
# Initialize a VetiverModel object
#v = VetiverModel(model=model, model_name='penguin_model', prototype_data=X)
# Setup a local board for vetiver pins
#model_board = board_folder("Final Project/data/model", allow_pickle_read=True)
# Write your model to the pin board
#vetiver_pin_write(model_board, v, 'penguin_model_pin')
# Prepare a Docker container for deployment
#vetiver.prepare_docker(model_board, "penguin_model")
quit
#packages <- c("palmerpenguins", "dplyr", "ggplot2", "tidyverse", "tidymodels", "ISLR2","rpart.plot", "vip", "xgboost", "randomForest")
#suppressMessages(sapply(packages, install.packages))
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(ISLR2)
library(rpart.plot)
library(vip)
library(xgboost)
library(randomForest)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
),
.groups = "drop"
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = bill_depth_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
#Random Forest For sex
tree_spec <- decision_tree() %>%
set_engine("rpart")
class_tree_spec <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification")
class_tree_fit <- class_tree_spec %>%
fit(sex ~ ., data = penguins)
class_tree_fit %>%
extract_fit_engine() %>%
rpart.plot()
augment(class_tree_fit, new_data = penguins) %>%
accuracy(truth = sex, estimate =.pred_class)
augment(class_tree_fit, new_data = penguins) %>%
conf_mat(truth = sex, estimate =.pred_class)
#packages <- c("DBI", "duckdb")
#suppressMessages(sapply(packages, install.packages))
library(DBI)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins, overwrite = TRUE)
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
DBI::dbDisconnect(con, shutdown = TRUE)
#packages <- c("palmerpenguins", "dplyr", "ggplot2", "tidyverse", "tidymodels", "ISLR2","rpart.plot", "vip", "xgboost", "randomForest")
#suppressMessages(sapply(packages, install.packages))
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(ISLR2)
library(rpart.plot)
library(vip)
library(xgboost)
library(randomForest)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
),
.groups = "drop"
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = bill_depth_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
#Random Forest For sex
tree_spec <- decision_tree() %>%
set_engine("rpart")
class_tree_spec <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification")
class_tree_fit <- class_tree_spec %>%
fit(sex ~ ., data = penguins)
class_tree_fit %>%
extract_fit_engine() %>%
rpart.plot()
augment(class_tree_fit, new_data = penguins) %>%
accuracy(truth = sex, estimate =.pred_class)
augment(class_tree_fit, new_data = penguins) %>%
conf_mat(truth = sex, estimate =.pred_class)
#packages <- c("DBI", "duckdb")
#suppressMessages(sapply(packages, install.packages))
library(DBI)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins, overwrite = TRUE)
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
DBI::dbDisconnect(con, shutdown = TRUE)
ggplot(df, aes(x = bill_length_mm, y = body_mass_g, color = species, linetype = sex)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(
title = "Penguin Body Mass vs. Bill Length by Species and Gender",
x = "Bill Length (mm)",
y = "Body Mass (g)"
)
#packages <- c("palmerpenguins", "dplyr", "ggplot2", "tidyverse", "tidymodels", "ISLR2","rpart.plot", "vip", "xgboost", "randomForest")
#suppressMessages(sapply(packages, install.packages))
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(ISLR2)
library(rpart.plot)
library(vip)
library(xgboost)
library(randomForest)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
),
.groups = "drop"
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = bill_depth_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(df, aes(x = bill_length_mm, y = body_mass_g, color = species, linetype = sex)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(
title = "Penguin Body Mass vs. Bill Length by Species and Gender",
x = "Bill Length (mm)",
y = "Body Mass (g)"
)
ggplot(df, aes(x = bill_length_mm, y = body_mass_g, color = species, linetype = sex)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(
title = "Penguin Body Mass vs. Bill Length by Species and Gender",
x = "Bill Length (mm)",
y = "Body Mass (g)"
)
ggplot(df, aes(x = bill_length_mm, y = body_mass_g, color = sex)) +
geom_point() +  # Plot points
geom_smooth(method = "lm") +  # Add a linear trend line
theme_minimal() +
facet_wrap(~ species) +  # Create separate graphs for each species
labs(
title = "Penguin Body Mass vs. Bill Length by Species and Gender",
x = "Bill Length (mm)",
y = "Body Mass (g)"
)
adelie_data <- subset(df, species == "Adelie")
ggplot(adelie_data, aes(x = bill_length_mm, y = body_mass_g, color = sex)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(
title = "Adelie Penguin Body Mass vs. Bill Length by Gender",
x = "Bill Length (mm)",
y = "Body Mass (g)"
)
adelie_data_filtered <- subset(df, species == "Adelie" & !is.na(sex))
ggplot(adelie_data_filtered, aes(x = bill_length_mm, y = body_mass_g, color = sex)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(
title = "Adelie Penguin Body Mass vs. Bill Length by Gender",
x = "Bill Length (mm)",
y = "Body Mass (g)"
)
chinstrap_data <- subset(df, species == "Chinstrap")
# Create plot for Chinstrap penguins
ggplot(chinstrap_data, aes(x = bill_length_mm, y = body_mass_g, color = sex)) +
geom_point() +  # Plot points
geom_smooth(method = "lm") +  # Add linear trend line
theme_minimal() +
labs(
title = "Chinstrap Penguin Body Mass vs. Bill Length by Gender",
x = "Bill Length (mm)",
y = "Body Mass (g)"
)
gentoo_data <- subset(df, species == "Gentoo")
# Create plot for Gentoo penguins
ggplot(gentoo_data, aes(x = bill_length_mm, y = body_mass_g, color = sex)) +
geom_point() +  # Plot points
geom_smooth(method = "lm") +  # Add linear trend line
theme_minimal() +
labs(
title = "Gentoo Penguin Body Mass vs. Bill Length by Gender",
x = "Bill Length (mm)",
y = "Body Mass (g)"
)
gentoo_data_filtered <- subset(df, species == "Gentoo" & !is.na(sex))
ggplot(gentoo_data_filtered, aes(x = bill_length_mm, y = body_mass_g, color = sex)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal() +
labs(
title = "Gentoo Penguin Body Mass vs. Bill Length by Gender",
x = "Bill Length (mm)",
y = "Body Mass (g)"
)
